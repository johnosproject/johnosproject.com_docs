"use strict";(self.webpackChunkjosp_docs=self.webpackChunkjosp_docs||[]).push([[7801],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),b=o,m=p["".concat(l,".").concat(b)]||p[b]||d[b]||a;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},57550:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={title:"Exported object"},s="Object exported by distribution",i={unversionedId:"exported_object",id:"exported_object",title:"Exported object",description:"The JOD MBus distribution, when executed, generate a new object's structure depending on slaves currently connected to the MBus master.",source:"@site/3_references/2_jod_dists/jod_mbus/1_exported_object.mdx",sourceDirName:".",slug:"/exported_object",permalink:"/references/jod_dists/JOD_MBus/exported_object",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Exported object"},sidebar:"jodDistsSidebar",previous:{title:"JOD MBus References",permalink:"/references/jod_dists/JOD_MBus/"},next:{title:"Requirements",permalink:"/references/jod_dists/JOD_MBus/requirements"}},l={},c=[{value:"Object info",id:"object-info",level:2},{value:"Object structure",id:"object-structure",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"object-exported-by-distribution"},"Object exported by distribution"),(0,o.kt)("p",null,"The JOD MBus distribution, when executed, generate a new object's structure depending on slaves currently connected to the MBus master.",(0,o.kt)("br",null),"\nThis distribution can be configured to export all connected MBus slaves or only a single slave.",(0,o.kt)("br",null),"\nObject's specification are split in 2 groups:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#object-info"},"Object's info"),":",(0,o.kt)("br",null),"\nmodel, brand and other generic info about the object exported"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#object-structure"},"Object's structure"),":",(0,o.kt)("br",null),"\nexported object's features as a hierarchical list of status and actions")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"object-info"},"Object info"),(0,o.kt)("p",null,"For ALL mode:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Model"),": MBus Gateway"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Brand"),": John OS"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description"),": The MBus gateway (serial-device: '$JOD_MBUS_DEV')")),(0,o.kt)("p",null,"*"," ",(0,o.kt)("inlineCode",{parentName:"p"},"$JOD_MBUS_DEV")," values come from distribution's configs"),(0,o.kt)("p",null,"For SLAVE mode:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Model"),": MBus Slave"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Brand"),": John OS"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description"),": The '$DEVICE_PRODUCT_NAME' (manufacturer: '$DEVICE_MANUFACTURER') MBus slave device")),(0,o.kt)("p",null,"*"," ",(0,o.kt)("inlineCode",{parentName:"p"},"$DEVICE_PRODUCT_NAME")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"$DEVICE_MANUFACTURER")," values come from MBus slave device"),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"object-structure"},"Object structure"),(0,o.kt)("p",null,"Depending on the ",(0,o.kt)("inlineCode",{parentName:"p"},"JOD_MBUS_TYPE")," configs, this distribution can expose all connected slaves (ALL mode) or only one of them (SLAVE mode).",(0,o.kt)("br",null),"\nIn both case at his startup, the JOD MBus distributions scan with the MBus Master available slaves to retrieve their info and generate the object's structure."),(0,o.kt)("p",null,"When the ALL mode is set, this distribution query to the MBus Master all available slaves (",(0,o.kt)("inlineCode",{parentName:"p"},"mbus-serial-scan"),").\nThen, for each slave, create a container in the root component of the object's structure and populate it with the slave's states.",(0,o.kt)("br",null),"\nOn the other side, when the SLAVE mode is set, all slave's states are added directly to the root."),(0,o.kt)("p",null,"Each MBus slave generate a different list of statuses depending on the 'DataRecord' fields returned by the slave itself (",(0,o.kt)("inlineCode",{parentName:"p"},"mbus-serial-request-data"),")."),(0,o.kt)("p",null,"More details on DataRecord2States transformation in the ",(0,o.kt)("a",{parentName:"p",href:"https://bitbucket.org/johnosproject_shared/com.robypomper.josp.jod.mbus/src/master/dists/resources/scripts/hw/generateObjectStructure_ALL.sh"},(0,o.kt)("inlineCode",{parentName:"a"},"scripts/hw/generateObjectStructure_ALL.sh"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://bitbucket.org/johnosproject_shared/com.robypomper.josp.jod.mbus/src/master/dists/resources/scripts/hw/generateObjectStructure_SLAVE.sh"},(0,o.kt)("inlineCode",{parentName:"a"},"scripts/hw/generateObjectStructure_SLAVE.sh"))," scripts; or to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rscada/libmbus"},(0,o.kt)("inlineCode",{parentName:"a"},"libmbus"))," home page."))}d.isMDXComponent=!0}}]);