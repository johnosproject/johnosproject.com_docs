"use strict";(self.webpackChunkjosp_docs=self.webpackChunkjosp_docs||[]).push([[5126],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),p=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return t?n.createElement(f,s(s({ref:r},c),{},{components:t})):n.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},14399:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=t(87462),a=(t(67294),t(3905));const o={slug:"./"},s="JOD Workers",l={unversionedId:"jod/specs/workers/index",id:"jod/specs/workers/index",title:"JOD Workers",description:"Workers are the components that act as a bridge between the JOD Agent's Pillars and his firmware.",source:"@site/3_references/1_josp/1_jod/4_specs/6_workers/0_index.mdx",sourceDirName:"1_jod/4_specs/6_workers",slug:"/jod/specs/workers/",permalink:"/references/josp/jod/specs/workers/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{slug:"./"},sidebar:"referencesSidebar",previous:{title:"Range",permalink:"/references/josp/jod/specs/pillars/range"},next:{title:"Placeholders",permalink:"/references/josp/jod/specs/workers/workers_placeholders"}},i={},p=[{value:"Pullers",id:"pullers",level:2},{value:"Listeners",id:"listeners",level:2},{value:"Executors",id:"executors",level:2}],c={toc:p},u="wrapper";function m(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"jod-workers"},"JOD Workers"),(0,a.kt)("p",null,"Workers are the components that act as ",(0,a.kt)("strong",{parentName:"p"},"a bridge between the JOD Agent's Pillars and his firmware"),".",(0,a.kt)("br",null),"\nThey translate Pillar's Actions requests to firmware calls, and checks for firmware updates to send status update messages to JOSP Services."),(0,a.kt)("p",null,"Because JOSP Objects can represent almost any object, the ",(0,a.kt)("strong",{parentName:"p"},"JOD Agent must be able to interact with different type of firmware"),".",(0,a.kt)("br",null),"\nThe JOD Agent provide some worker implementations that allow you handle common firmware integrations like shell command, HTTP requests... For a full list of available workers implementation see next chapters."),(0,a.kt)("p",null,"To use a worker in a requires 2 configuration steps.\nFirst add the Worker's implementation to the ",(0,a.kt)("a",{parentName:"p",href:"../configs"},"JOD Agent configs"),".\nSecond configure a pillar to use that worker implementation."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pillar's configuration provide 3 special properties to configure worker instances"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"listener"),": define firmware calls for listener's states and actions"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"puller"),": define firmware calls for puller's states and actions"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"executor"),": define firmware calls used by actions whene receive a command request")),(0,a.kt)("p",null,"Each pillar's config must include at least one of the two ",(0,a.kt)("inlineCode",{parentName:"p"},"listener")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"puller")," properties.\nOnly Action pillars must set also ",(0,a.kt)("inlineCode",{parentName:"p"},"executor")," property.",(0,a.kt)("br",null),"\nThose properties accept a string formatted with following pattern:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{FirmwareProto}://{FirmwareConfigs}\n")),(0,a.kt)("p",null,"Where the ",(0,a.kt)("inlineCode",{parentName:"p"},"FirmwareProto")," must be one of the FirmwareProtocols registered in the ",(0,a.kt)("a",{parentName:"p",href:"#jod-agent-configs"},"JOD Agent configs")," file with the ",(0,a.kt)("inlineCode",{parentName:"p"},"jod.executor_mngr.pullers|listeners|executors")," properties.",(0,a.kt)("br",null),"\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"FirmwareConfigs")," is a string containing a list of ",(0,a.kt)("inlineCode",{parentName:"p"},"key=value")," separated by ';'.\nBecause each worker requires different configs, check worker's documentation for Firmware Configs."),(0,a.kt)("p",null,"Any Firmware Configs can contain placeholder that are replaced with pillar's properties.\n",(0,a.kt)("strong",{parentName:"p"},"You can setup dynamic configuration using those placeholder."),(0,a.kt)("br",null),"\nFor example you can set a Firmware Config for a file path using the pillar's name.",(0,a.kt)("br",null),"\nEach worker's documentation specify when each Firmware Configs is updated."),(0,a.kt)("p",null,"More info about Firmware Configs Placeholders on ",(0,a.kt)("a",{parentName:"p",href:"workers_placeholders"},"JOD Workers Placeholder")," page."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("p",null,"In the following example we defined a 'Temperature' state, that pull every ",(0,a.kt)("inlineCode",{parentName:"p"},"freq")," ('600') seconds the ",(0,a.kt)("inlineCode",{parentName:"p"},"requestUrl"),"() url and retrieve the temperature value. The ",(0,a.kt)("inlineCode",{parentName:"p"},"puller")," property is set to use the 'http' firmware protocol and pass him the configs string (everything after the '://' separator). In this case the 'http' firmware require the ",(0,a.kt)("inlineCode",{parentName:"p"},"requestUrl")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"freq")," params among others. More details on firmware protocols params on the next section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=\"struct.json: RangeState puller 'http' example\"",title:'"struct.json:',RangeState:!0,puller:!0,"'http'":!0,'example"':!0},'    // ...\n    "Temperature" : {\n        "type": "RangeState",\n        "puller" : "http://requestUrl=\'https://api.openweathermap.org/data/2.5/weather?q=rome&units=metric&appid=03317c1f2de6827424efd170890ffd3c\';formatType=JSON;formatPath=\'$.main.temp\';formatPathType=JSONPATH;freq=600",\n        "min": "-50",\n        "max": "100"\n    },\n    // ...\n')),(0,a.kt)("h2",{id:"pullers"},"Pullers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/references/josp/jod/specs/workers/puller_shell"},"Shell"),": On pulling, execute bash or powershell commands and use their output as state's value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/references/josp/jod/specs/workers/puller_http"},"Http"),": On pulling, query configured url and parse the response as state's value")),(0,a.kt)("h2",{id:"listeners"},"Listeners"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/references/josp/jod/specs/workers/listener_file"},"File"),": On startup, start a watchdog service that listen for configured file changes; when the file is updated use his content as state's value")),(0,a.kt)("h2",{id:"executors"},"Executors"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/references/josp/jod/specs/workers/executor_shell"},"Shell"),": on action request received, execute configured bash or powershell command"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/references/josp/jod/specs/workers/executor_file"},"File"),": on action request received, write configured value to a file"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"//docs/references/josp/jod/specs/workers/executor_http"},"Http"),": on action request received, query configured url")))}m.isMDXComponent=!0}}]);