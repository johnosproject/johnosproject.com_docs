"use strict";(self.webpackChunkjosp_docs=self.webpackChunkjosp_docs||[]).push([[1583],{26527:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var s=a(87462),n=(a(67294),a(3905)),r=a(74866),i=a(85162);a(60614);const o={},l="Object PRE-POST scripts",p={unversionedId:"create_your_own_jod_distribution/configuration/pre_post_scripts",id:"create_your_own_jod_distribution/configuration/pre_post_scripts",title:"Object PRE-POST scripts",description:"End Users use JOD Distribution Commands to manage their JOD Distribution installation. They can start/stop, install/uninstall (as a service) and get his state.",source:"@site/3_references/5_tools/1_jod_dist_template/2_create_your_own_jod_distribution/3_configuration/4_pre_post_scripts.mdx",sourceDirName:"2_create_your_own_jod_distribution/3_configuration",slug:"/create_your_own_jod_distribution/configuration/pre_post_scripts",permalink:"/references/tools/jod_dist_template/create_your_own_jod_distribution/configuration/pre_post_scripts",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"toolsSidebar",previous:{title:"Object Structure",permalink:"/references/tools/jod_dist_template/create_your_own_jod_distribution/configuration/object_structure"},next:{title:"Objects Resources",permalink:"/references/tools/jod_dist_template/create_your_own_jod_distribution/configuration/object_resources"}},u={},c=[{value:"Common PRE-POST operations",id:"common-pre-post-operations",level:2},{value:"Check working Operating System",id:"check-working-operating-system",level:3},{value:"Requirements checks",id:"requirements-checks",level:3},{value:"Execution environment setup",id:"execution-environment-setup",level:3},{value:"PreStartup initialization and PostShutdown cleanup",id:"prestartup-initialization-and-postshutdown-cleanup",level:3},{value:"Dynamic configurations (object info and struct)",id:"dynamic-configurations-object-info-and-struct",level:3},{value:"Hook script call another hook script",id:"hook-script-call-another-hook-script",level:3},{value:"Distribution specific configs",id:"distribution-specific-configs",level:2},{value:"Define distribution config",id:"define-distribution-config",level:3},{value:"Use distribution config from a PRE-POST script",id:"use-distribution-config-from-a-pre-post-script",level:3}],d={toc:c},m="wrapper";function h(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,s.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"object-pre-post-scripts"},"Object PRE-POST scripts"),(0,n.kt)("p",null,"End Users use ",(0,n.kt)("a",{parentName:"p",href:"https://bitbucket.org/johnosproject_shared/com.robypomper.josp.jod.template/src/develop/docs/dists/dists.md"},"JOD Distribution Commands")," to manage their JOD Distribution installation. They can start/stop, install/uninstall (as a service) and get his state."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://bitbucket.org/johnosproject_shared/com.robypomper.josp.jod.template/src/develop/docs/dists/dists.md"},"JOD Distribution Commands"),", during their execution, are configured to check for special scripts in the ",(0,n.kt)("inlineCode",{parentName:"p"},"script")," folder; if those scripts exist, then they are executed."),(0,n.kt)("p",null,"Those special scripts act as hooks and allow Makers to inject distribution's specific commands to be executed before or after start/stop, install/uninstall the distribution."),(0,n.kt)("p",null,"Here the full list of JOD Distribution Commands, and the hook they try to call:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"JOD Dist Cmd"),(0,n.kt)("th",{parentName:"tr",align:null},"PRE-Script"),(0,n.kt)("th",{parentName:"tr",align:null},"POST_Script"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"start"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/pre-startup")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/post-startup"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"start FOREGROUND"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/pre-startup")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/post-shutdown"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"stop"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/pre-shutdown")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/post-shutdown"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"install"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/pre-install")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/post-install"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uninstall"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/pre-uninstall")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"scripts/post-uninstall"))))),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Depending on which version of the JOD Distribution Commands is executed (Bash or Powershell), corresponding PRE-POST script (sh or ps1) will be used as hook.",(0,n.kt)("br",null)),(0,n.kt)("p",{parentName:"admonition"},"So the PRE script executed by ",(0,n.kt)("inlineCode",{parentName:"p"},"bash start.sh")," will be the ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/pre-startup.sh")," scripts, meanwhile for the ",(0,n.kt)("inlineCode",{parentName:"p"},"powershell uninstall.ps1")," command, the POST hook is the ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/post-uninstall.ps1"),".")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," JOD Dist Cmd always call the ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/pre-startup")," hook before the JOD agent execution. But, when the distribution startup as a FOREGROUND process, it does NOT call the ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/post-startup")," hook as usual, instead it execute the ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/post-shutdown")," hook. That assures Maker a place where put their startup/shutdown code independently to the ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," JOD Dist Cmd working mode (background or foreground)."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"common-pre-post-operations"},"Common PRE-POST operations"),(0,n.kt)("p",null,"PRE and POST script are useful in many case to customize"),(0,n.kt)("h3",{id:"check-working-operating-system"},"Check working Operating System"),(0,n.kt)("p",null,"Many JOD Distribution are implemented to work only on a specific OS(s).",(0,n.kt)("br",null),"\nIf that's you case, we suggest adding an OS check to each PRE-hook."),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="pre-XYZ.sh:wrong OS check"',title:'"pre-XYZ.sh:wrong',OS:!0,'check"':!0},'# Check supported OS\nsupportedOS=("Unix" "BSD" "Solaris")\nfailOnUnsupportedOS "${supportedOS[@]}"\n'))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="pre-XYZ.ps1:wrong OS check"',title:'"pre-XYZ.ps1:wrong',OS:!0,'check"':!0},'# Check supported OS\n$supportedOS="Unix", "BSD", "Solaris"\nfailOnUnsupportedOS $supportedOS\n')))),(0,n.kt)("p",null,"In the previous example we added a check that fails if executing OS is not in the ",(0,n.kt)("inlineCode",{parentName:"p"},"supportedOS")," list. With 'executing OS' we are referring to OS where your JOD Distribution were installed by End User."),(0,n.kt)("p",null,"Available OS names are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Unix")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"MacOS")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"BSD")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Solaris")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Win32"))),(0,n.kt)("h3",{id:"requirements-checks"},"Requirements checks"),(0,n.kt)("p",null,"If your distribution require special hardware configuration, 3rd party software or specific files installed on execution OS, you can add custom checks to the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-startup")," and/or ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-install")," hooks. So if checks fail, End user can't startup/install the JOSP object and receive detailed message on what was wrong."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Check command availability:")),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title=\"dists/resources/scripts/pre-startup.sh:check 'top' command availability\"",title:'"dists/resources/scripts/pre-startup.sh:check',"'top'":!0,command:!0,'availability"':!0},'# Check top\nif command -v top &>/dev/null; then\n  echo "\'top\' command installed"\nelse\n  echo "Missing Java, please install it"\n  logFat "\'top\' command not installed, exit"\nfi\n'))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title=\"dists/resources/scripts/pre-startup.ps1:check 'top' command availability\"",title:'"dists/resources/scripts/pre-startup.ps1:check',"'top'":!0,command:!0,'availability"':!0},"ToDo: Write dists/resources/scripts/pre-startup.ps1:check 'top' command availability\n")))),(0,n.kt)("p",null,"A common tip, is to implement all requirements checks in the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-startup")," script, then call it from the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-install")," script. That allow you to write them only once. See ",(0,n.kt)("a",{parentName:"p",href:"#hook-script-call-another-hook-script"},"Hook script call another Hook script"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Check Hardware configuration:")),(0,n.kt)("p",null,"ToDo: Write Check Hardware configuration"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Check Files exist:")),(0,n.kt)("p",null,"ToDo: Write Check Hardware configuration"),(0,n.kt)("h3",{id:"execution-environment-setup"},"Execution environment setup"),(0,n.kt)("p",null,"Often occurs that a distribution must perform some setup to the environment where it will be executed by the End User."),(0,n.kt)("p",null,"Here an example that set executable all script contained in the ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/sendors")," directory."),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/resources/scripts/pre-startup.sh:setup execution environment"',title:'"dists/resources/scripts/pre-startup.sh:setup',execution:!0,'environment"':!0},"# Set sensors scripts executables\nchmod +x $SCRIPT_DIR/sensors/*\n"))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/resources/scripts/pre-startup.ps1:setup execution environment"',title:'"dists/resources/scripts/pre-startup.ps1:setup',execution:!0,'environment"':!0},"ToDo: Write dists/resources/scripts/pre-startup.ps1:setup execution environment\n")))),(0,n.kt)("p",null,"Remember that the PRE-POST hooks are called every time the End User execute a JOD Dist Cmd, so if you would do some operations only once, please add some check before it to avoid repeating same operations each hook execution."),(0,n.kt)("h3",{id:"prestartup-initialization-and-postshutdown-cleanup"},"PreStartup initialization and PostShutdown cleanup"),(0,n.kt)("p",null,"Sometimes a JOD Distribution must perform some operations before his startup (init) and after his shutdown (clean). For example to enable and then disable some service required during the JOD agent execution."),(0,n.kt)("p",null,"You can add initialization commands to the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-startup")," hooks and the cleanup comands to ",(0,n.kt)("inlineCode",{parentName:"p"},"post-shutdown"),". Those commands will always be called during JOD Agent startup and shutdown even if it executed as foreground process or installed as a service."),(0,n.kt)("h3",{id:"dynamic-configurations-object-info-and-struct"},"Dynamic configurations (object info and struct)"),(0,n.kt)("p",null,"Another reason to use the PRE hooks is to generate a dynamic configurations for your distribution like the object's structure. That's made possible by adding generation commands to the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-startup")," hook."),(0,n.kt)("p",null,"Following example use the ",(0,n.kt)("inlineCode",{parentName:"p"},"JOD_MWO_LOCATION")," value from ",(0,n.kt)("a",{parentName:"p",href:"/references/tools/jod_dist_template/create_your_own_jod_distribution/configuration/object_configs#jod-configs"},"distribution specific configs")," and replace it with corresponding placeholder in the ",(0,n.kt)("inlineCode",{parentName:"p"},"struct_TMPL.jod")," file, then save result to the ",(0,n.kt)("inlineCode",{parentName:"p"},"configs/struct.jod")," file."),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/resources/scripts/pre-startup.sh:generate struct.jod file dynamically"',title:'"dists/resources/scripts/pre-startup.sh:generate',"struct.jod":!0,file:!0,'dynamically"':!0},'JOD_STRUCT_TMPL=$JOD_DIR/struct_TMPL.jod\nJOD_STRUCT=$JOD_DIR/configs/struct.jod\nlogInf "Update JOD instance\'s structure to Location = $JOD_MWO_LOCATION"\nsed -e "s/\\${JOD_MWO_LOCATION}/$JOD_MWO_LOCATION/" $JOD_STRUCT_TMPL >$JOD_STRUCT\n'))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/resources/scripts/pre-startup.ps1:generate struct.jod file dynamically"',title:'"dists/resources/scripts/pre-startup.ps1:generate',"struct.jod":!0,file:!0,'dynamically"':!0},"ToDo: Write dists/resources/scripts/pre-startup.ps1:generate struct.jod file dynamically\n")))),(0,n.kt)("p",null,"More complex object's structure can be generated using the APIs from ",(0,n.kt)("inlineCode",{parentName:"p"},"scripts/jod/struct/builder.sh")," script provided by the JOD Distribution TEMPLATE. *",(0,n.kt)("em",{parentName:"p"},"NB!"),": This is an experimental feature, and it's available only for bash version."),(0,n.kt)("admonition",{title:"You can generate dynamically not just the object's structure, but also any other script/configs/resource required by your distribution.",type:"note"}),(0,n.kt)("h3",{id:"hook-script-call-another-hook-script"},"Hook script call another hook script"),(0,n.kt)("p",null,"When two or more Hook scripts must perform same operations, you can write all commands once in a single Hook script. Then call it from all other Hook scripts."),(0,n.kt)("p",null,"Here the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-install")," script example that call the ",(0,n.kt)("inlineCode",{parentName:"p"},"pre-startup")," hook:"),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="pre-install.sh:call pre-startup.sh hook"',title:'"pre-install.sh:call',"pre-startup.sh":!0,'hook"':!0},'logInf "Execute pre-startup.sh..."\nif [ -f "$JOD_DIR/scripts/pre-startup.sh" ]; then\nexecScriptCommand $JOD_DIR/scripts/pre-startup.sh || ( [ "$?" -gt "0" ] \\\n&& logWar "Error executing PRE startup script, exit $?" && exit $? \\\n|| logWar "Error executing PRE startup script, continue $?" )\nelse\nlogDeb "PRE startup script not found, skipped (missing $JOD_DIR/scripts/pre-startup.sh)"\nfi\n'))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="pre-install.ps1:call pre-startup.ps1 hook"',title:'"pre-install.ps1:call',"pre-startup.ps1":!0,'hook"':!0},"ToDo: Write pre-install.ps1:call pre-startup.ps1 hook\n")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"distribution-specific-configs"},"Distribution specific configs"),(0,n.kt)("p",null,"The PRE-POST scripts in conjunction with the ",(0,n.kt)("a",{parentName:"p",href:"/references/tools/jod_dist_template/create_your_own_jod_distribution/configuration/object_configs#jod-configs"},"JOD Configs")," file are a powerful tool to create JOD Distribution that can adapt their self to the execution environment and end user needs."),(0,n.kt)("p",null,"Just declaring your variables in the ",(0,n.kt)("inlineCode",{parentName:"p"},"dists/configs/jod_configs.sh|ps1")," file from your distribution project dir, they will be available also to the PRE-POST scripts. Then, End user can easily configure distribution behaviour simply editing the JOD Config file."),(0,n.kt)("h3",{id:"define-distribution-config"},"Define distribution config"),(0,n.kt)("p",null,"Define ",(0,n.kt)("inlineCode",{parentName:"p"},"JOD_MWO_LOCATION")," variable to the ",(0,n.kt)("inlineCode",{parentName:"p"},"dists/configs/jod_configs.sh|ps1")," file with a default value."),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/configs/jod_configs.sh:define distribution specific configs"',title:'"dists/configs/jod_configs.sh:define',distribution:!0,specific:!0,'configs"':!0},'# ############### #\n# MyDist\'s config #\n# ############### #\n\n# My Dist XY config\n# Config desription and values examples\n# set a value as default value or keep it as empty string ""\nexport JOD_MWO_LOCATION="Rome"\n'))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/configs/jod_configs.ps1:define distribution specific configs"',title:'"dists/configs/jod_configs.ps1:define',distribution:!0,specific:!0,'configs"':!0},"ToDo: Write dists/configs/jod_configs.ps1:define distribution specific configs\n")))),(0,n.kt)("h3",{id:"use-distribution-config-from-a-pre-post-script"},"Use distribution config from a PRE-POST script"),(0,n.kt)("p",null,"Read ",(0,n.kt)("inlineCode",{parentName:"p"},"JOD_MWO_LOCATION")," variable value from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dists/resources/scripts/pre-startup.sh|ps1")," script."),(0,n.kt)(r.Z,{groupId:"os-shell",defaultValue:"bash",values:[{label:"Linux/Mac",value:"bash"},{label:"Windows",value:"powershell"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/resources/scripts/pre-startup.sh:read distribution specific configs"',title:'"dists/resources/scripts/pre-startup.sh:read',distribution:!0,specific:!0,'configs"':!0},'logInf "Update JOD instance\'s structure to Location = $JOD_MWO_LOCATION"\n'))),(0,n.kt)(i.Z,{value:"powershell",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="dists/resources/scripts/pre-startup.ps1:read distribution specific configs"',title:'"dists/resources/scripts/pre-startup.ps1:read',distribution:!0,specific:!0,'configs"':!0},"ToDo: Write dists/resources/scripts/pre-startup.ps1:read distribution specific configs\n")))))}h.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var s=a(67294),n=a(86010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return s.createElement("div",{role:"tabpanel",className:(0,n.Z)(r.tabItem,i),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>y});var s=a(87462),n=a(67294),r=a(86010),i=a(12466),o=a(16550),l=a(91980),p=a(67392),u=a(50012);function c(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:s,default:n}}=e;return{value:t,label:a,attributes:s,default:n}}))}function d(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const s=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(s.location.search);t.set(r,e),s.replace({...s.location,search:t.toString()})}),[r,s])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:s}=e,r=d(e),[i,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=a.find((e=>e.default))??a[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r}))),[l,p]=h({queryString:a,groupId:s}),[c,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,r]=(0,u.Nk)(a);return[s,(0,n.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:s}),f=(()=>{const e=l??c;return m({value:e,tabValues:r})?e:null})();(0,n.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),k(e)}),[p,k,r]),tabValues:r}}var f=a(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:a,selectedValue:o,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),s=p[a].value;s!==o&&(c(t),l(s))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:i}=e;return n.createElement("li",(0,s.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},i,{className:(0,r.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":o===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:s}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===s));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==s}))))}function N(e){const t=k(e);return n.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},n.createElement(g,(0,s.Z)({},e,t)),n.createElement(v,(0,s.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return n.createElement(N,(0,s.Z)({key:String(t)},e))}}}]);