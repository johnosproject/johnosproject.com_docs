"use strict";(self.webpackChunkjosp_docs=self.webpackChunkjosp_docs||[]).push([[8956],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,k=p["".concat(i,".").concat(h)]||p[h]||d[h]||s;return n?o.createElement(k,r(r({ref:t},u),{},{components:n})):o.createElement(k,r({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},88630:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var o=n(87462),a=(n(67294),n(3905));const s={},r="Glossary",l={type:"mdx",permalink:"/glossary",source:"@site/src/pages/glossary.mdx",title:"Glossary",description:"---",frontMatter:{}},i=[{value:"The John Project",id:"the-john-project",level:2},{value:"The IoT EcoSystem",id:"the-iot-ecosystem",level:2},{value:"Users",id:"users",level:3},{value:"Components",id:"components",level:3},{value:"Communication",id:"communication",level:3},{value:"The John EcoSystem",id:"the-john-ecosystem",level:2},{value:"Users",id:"users-1",level:3},{value:"Components",id:"components-1",level:3},{value:"Object",id:"object",level:4},{value:"Service",id:"service",level:4}],c={toc:i},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"glossary"},"Glossary"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"the-john-project"},"The John Project"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John O.S. Project")),(0,a.kt)("p",null,"It\u2019s the Open Source project that provides all softwares and tools to create a complete and easy to use ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT EcoSystem"),"."),(0,a.kt)("p",null,"This project contains all source code required to build the components (",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Daemon"),", ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Service Library")," and the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Cloud Platform"),") required by any other ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT (John) Solution"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John O.S. Protocol")),(0,a.kt)("p",null,"It\u2019s the language used by ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Objects")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services")," to share object\u2019s info and interact with them, both for ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Direct Communication")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Cloud Communication"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Object Daemon")),(0,a.kt)("p",null,"The software that represents an ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object")," in a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),"."),(0,a.kt)("p",null,"His main tasks are to share the Object\u2019s info to the John EcoSystem and translate the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John O.S. Protocol")," to/from ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object\u2019s Utils & Apps"),". Once a John Object is shared on the John EcoSystem, ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services")," can interact with it."),(0,a.kt)("p",null,"The JOD can be configured to adapt it to any kind of object. It\u2019s main configuration is the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Structure")," that hierarchically defines which ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Status")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Actions")," expose the Object to the John EcoSystem. Status and Actions can handle JOD requests in different ways depending on the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Utils & Apps")," availables for the JOD instance."),(0,a.kt)("span",{style:{textDecoration:"underline"}},"Makers")," can package (1) JOD, (2) his configs, (3) required Utils & Apps and create a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Distribution")," ready to distribute and to install.",(0,a.kt)("p",null,"In a John EcoSystem, a John Object is identified by his ID and his model."),(0,a.kt)("p",null,"Same John Object\u2019s models share the same John Object Structure."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Service Library")),(0,a.kt)("p",null,"Multi-language library that can be included by developers in their softwares."),(0,a.kt)("p",null,"Once the JSL is included in a software then it can be considered a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Service"),"."),(0,a.kt)("p",null,"The JSL helps developers to list, interact and manage user\u2019s objects. It also provides ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John User"),"\u2019s authentication methods."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Cloud Platform")),(0,a.kt)("p",null,"The (optional) cloud component for a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),"."),(0,a.kt)("p",null,"The JCP is a microservice cloud platform that can be executed locally (for development purpose) or deployed on cloud."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Public John Cloud Platform")),(0,a.kt)("p",null,"The shared ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),". It\u2019s a public accessibile ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Cloud Platform")," instance reachable at ",(0,a.kt)("a",{parentName:"p",href:"https://www.johnosproject.org/frontend/index.html"},"www.johnosproject.org/frontend/index.html"),"."),(0,a.kt)("p",null,"Any ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object")," connected to this JCP can be accessible from anyone (after object\u2019s permissions check); the same for all ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services")," configured to connect to Public JCP."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"the-iot-ecosystem"},"The IoT EcoSystem"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"IoT EcoSystem")),(0,a.kt)("p",null,"The set of all components and their configs required by an ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT Solution"),"."),(0,a.kt)("p",null,"Normally there are some physical components (the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object"),") and some user\u2019s interfaces or batch/storage processes (the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Service"),")."),(0,a.kt)("p",null,"Between them can be dozens of technologies: electronic components, hw interfaces, communication modules, gateways, cloud services, authorization servers\u2026"),(0,a.kt)("p",null,"Finally the IoT EcoSystem\u2019s scalability depends on the number and size of the IoT Solutions deployed. The IoT EcoSystem must be scalable in step with the growth of deployed IoT Solutions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"IoT Solution")),(0,a.kt)("p",null,"Every time an ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object")," communicates with a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Service"),", we can see it as an IoT Solution."),(0,a.kt)("p",null,"IoT Solutions are based on only 3 components: Objects, Services and optionally a cloud service for remote communication. Then these components can be used by 3 actors: ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Makers"),", ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Developers")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"End Users"),"."),(0,a.kt)("p",null,"With this set of components and actors, you can design any type of IoT Solution like Data Collection, Digital Twin, Predictive Maintenance, Car Sharing and many many more."),(0,a.kt)("h3",{id:"users"},"Users"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Makers")),(0,a.kt)("p",null,"The ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT EcoSystem")," actor that designed the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object"),"."),(0,a.kt)("p",null,"Maker is anyone that creates a connected Object. He can be a hobbyist or a manufacturer that produces and sells connected Objects."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Developers")),(0,a.kt)("p",null,"The ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT EcoSystem")," actor that implemented the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Service"),"."),(0,a.kt)("p",null,"Any developer that must interact with a connected ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object"),". Typically, he must integrate different standards and approaches, depending on how many technologies are implied in the solution developed. He is also in charge of implementing object\u2019s interactions logic and user interfaces."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"End Users")),(0,a.kt)("p",null,"The ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT EcoSystem")," actor that uses the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object")," and/or ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Service"),"."),(0,a.kt)("p",null,"Users, in an IoT EcoSystem, can interact with an Object directly (physically) or remotely (via a Service). Normally, Services are also used by Users to configure and manage their Objects."),(0,a.kt)("h3",{id:"components"},"Components"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Object")),(0,a.kt)("p",null,"Any connected Object, regardless of the technologies used for his communication. But depending on that, it can be used only on certain ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT Solutions"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Object\u2019s Firmware")),(0,a.kt)("p",null,"Each ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object")," is composed of HW and SW components."),(0,a.kt)("p",null,"The Firmware, typically it\u2019s the low-level SW dedicated to control the HW components (read sensor data and/or activate actuators)."),(0,a.kt)("p",null,"Firmware is used by other SW components that Tx/Rx sensors data and actuators commands to other ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT EcoSystem")," components (generally to aggregator or storage components; local or cloud)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Service")),(0,a.kt)("p",null,"Any software that elaborate/store ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object"),"\u2019s data and/or interact with it."),(0,a.kt)("p",null,"Typically, Services are User Interfaces like Mobile Apps or Web Dashboards. Other times Services can be AI algorithms or Data Lakes."),(0,a.kt)("p",null,"Infrastructure softwares, like agents, gateways, load balancers, APIs\u2026; are not considered Services of an IoT EcoSystem. because they are part of the IoT EcoSystem\u2019s infrastructure."),(0,a.kt)("h3",{id:"communication"},"Communication"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Direct Communication")),(0,a.kt)("p",null,"When a connected Object and a Service communicate directly, without intermediates like cloud platforms or gateways."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cloud Communication")),(0,a.kt)("p",null,"When a connected Object and a Service communicate through intermediates like cloud platforms or gateways."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"the-john-ecosystem"},"The John EcoSystem"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John EcoSystem")),(0,a.kt)("p",null,"The John EcoSystem is an ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"IoT EcoSystem")," based on ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John O.S. Project"),"\u2019s components."),(0,a.kt)("p",null,"The John EcoSystem allows ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Makers")," create ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Objects")," in minutes without coding skills. At the same time ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Developers")," can include the John Service Library in their software to make them ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services"),"."),(0,a.kt)("p",null,"A John EcoSystem can be self hosted for development or security reasons, or can be used the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Public John Cloud Platform")," as a shared John EcoSystem."),(0,a.kt)("h3",{id:"users-1"},"Users"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John User")),(0,a.kt)("p",null,"It\u2019s an ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"End User")," of a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),"."),(0,a.kt)("h3",{id:"components-1"},"Components"),(0,a.kt)("h4",{id:"object"},"Object"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Object")),(0,a.kt)("p",null,"The ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object")," of a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),"."),(0,a.kt)("p",null,"Every running instance of the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Daemon")," represents a John Object."),(0,a.kt)("p",null,"A John Object can be bought in a shop; or a user can download and install a ",(0,a.kt)("span",{style:{textDecoration:"underline"}}," John Object Distribution"),"; or even a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Maker")," can configure a JOD instance and build his own John Object."),(0,a.kt)("p",null,"Each John Object is configured with a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Structure")," that defines his ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Status")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}}," Actions"),". Then, ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"End Users")," can query Object\u2019s Status and/or execute his Actions from ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services"),"."),(0,a.kt)("p",null,"Depending on the technologies used in the connected Object, John Objects are splitted in 3 groups: ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Native Objects"),", ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Gateway Objects"),", ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Web Objects"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Native Object")),(0,a.kt)("p",null,"An object is considered a John Native Object when his States and Actions interact directly with the object's HW."),(0,a.kt)("p",null,"This kind of John Objects are composed of HW (processor, local storage, communication module, sensor and/or actuators) and SW (JOD, Utils & Apps and optionally extra firmware) components. For example a SoC board like Raspberry Pi in conjunction with some sensors and actuators, can be used as HW for a John Native Object."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Gateway Object")),(0,a.kt)("p",null,"A John Object can also represent a set of objects, for example all devices managed by a home automation gateway/hub."),(0,a.kt)("p",null,"Many home automation, but also industrial, standards use local gateways to aggregate multiple devices communication. Sometimes those local gateways act as bridges from device\u2019s standard and IP networks and (optionally) can expose a web server as UI or API interfaces."),(0,a.kt)("p",null,"When configured to represent this kind of objects, the JOD can be installed directly on the local gateway (that requires sysadmin access to the gateway, that invalidates the local gateway\u2019s warranty). If that\u2019s not possible, the JOD can be also installed on another local machine that can access the local gateway\u2019s UI or API."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Web Object")),(0,a.kt)("p",null,"When a connected Object exposes its info and features from a cloud service, we can integrate it to a John EcoSystem, as a John Web Object."),(0,a.kt)("p",null,"In a John Web Object his States and Actions send HTTP requests to query/execute the object's status/actions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Object Distribution")),(0,a.kt)("p",null,"A pre-configured and ready-to-run John Object Daemon distribution."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Object\u2019s Utils & Apps (Utils & Apps)")),(0,a.kt)("p",null,"Utils & Apps extends the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Daemon")," and acts as ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Object\u2019s Firmware"),"."),(0,a.kt)("p",null,"That mean, the JOD interact with the real world (outside the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),") via Utils & Apps calls."),(0,a.kt)("p",null,"Depending on configured Utils & Apps in the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Structures"),", ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Makers")," can create ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Objects")," that interact with HW modules (GPIO, I2C, 1-wire..), other protocols (MQTT, MBus, KNX\u2026) or even with web pages (HTTP APIs).."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Object\u2019s Structure")),(0,a.kt)("p",null,"It is the principal ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Daemon")," configuration. It defines how ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services")," can see the current ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object"),"."),(0,a.kt)("p",null,"Object\u2019s Structure contains all ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Statuses"),"/",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Actions")," the Object can provide/execute. With the aim to help ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Developers")," identify the right Object to use, all Statuses/Actions are organized into a hierarchy of containers. The main container, common on all John Objects, is the \u2018root\u2019 container."),(0,a.kt)("p",null,"The Object\u2019s Structure depends on ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object"),"\u2019s model. That means all Objects with the same model, share the same Object\u2019s Structure."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Status")),(0,a.kt)("p",null,"Read-only data from ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object"),", like a Sensor value."),(0,a.kt)("p",null,"Statuses are the basic components of a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object\u2019s Structure"),". They define how the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object Daemon")," should translate the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John O.S. Protocol")," messages to/from the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Utils & Apps"),"."),(0,a.kt)("p",null,"Each time a Status updated his value, a \u2018Status Update\u2019 message is sent to all John Services connected."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Actions")),(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object")," executable commands from a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Service"),".",(0,a.kt)("p",null,"Like ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Statuses"),", Actions are the basic components of a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object\u2019s Structure"),", but in addition to Statuses, Actions allow John Services execute a specific command on the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Object"),"."),(0,a.kt)("p",null,"Actions extends Statuses. Then, Actions also share a value to the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem")," and send \u2018Status Update\u2019 message on value change."),(0,a.kt)("h4",{id:"service"},"Service"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Service")),(0,a.kt)("p",null,"The ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Service")," of a ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John EcoSystem"),"."),(0,a.kt)("p",null,"Any software can be a John Service, just include the ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Service Library"),"."),(0,a.kt)("p",null,"Once the JSL is included, any software can list, query and interact with all available ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Objects"),"."),(0,a.kt)("p",null,"The JSL manages ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Direct")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}}," Cloud Communication")," with John Objects."),(0,a.kt)("p",null,"The JSL also provides user authentication methods. So softwares can ask ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"End User")," to login with their JCP Accounts and then access to restricted John Objects."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Manager Service")),(0,a.kt)("p",null,"Like other ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services")," but it can also access ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Makers")," and ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"Developers")," info."),(0,a.kt)("p",null,"Makers and Developers can obtain special ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Cloud Platform")," accounts that allow them to manage released ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Objects")," or get info on how ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"End Users")," interact with their ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Services"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"John Admin Service")),(0,a.kt)("p",null,"Like ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Manager Service")," but for ",(0,a.kt)("span",{style:{textDecoration:"underline"}},"John Cloud Platform")," admins."))}p.isMDXComponent=!0}}]);